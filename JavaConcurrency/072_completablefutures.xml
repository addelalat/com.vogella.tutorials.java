<section id="completablefutures">
	<title>CompletableFuture
	

		Asynchronous task handling is important
		for any application which performs time consuming activities, as IO
		operations.
		Two basic approaches to asynchronous task
		handling are available to a Java application: a thread can wait
		for
		a task,
		which is a blocking approach. Or the task can perform
		an action directly when the event completes, this is
		called a nonblocking
		approach.
	
	
		`CompletableFuture`
		extends the functionality of the
		`Future`
		interface with standard
		techniques for executing application code when a task completes, including
		various ways to
		combine tasks.
		`CompletableFuture`
		support both blocking and nonblocking approaches, including regular callbacks.
	
	
		This callback can be executed in another
		thread as the thread in which the
		`CompletableFuture`
		is executed.
	
	
		The following example demonstrates how to create a basic CompletableFuture.
		`CompletableFuture.supplyAsync`
		runs the task asynchronously on the default thread pool of Java.
		It has the option to supply your custom executor to
		define the
		`ThreadPool`
		.

	
	
		<programlisting language="java">
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
				href="./examples/completablefutures/CompletableFutureSimpleSnippet.java" />
		</programlisting>
	

	
		The usage of the
		`thenApply`
		method is demonstrated by the following code snippet.
	
	
		<programlisting language="java">
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
				href="./examples/completablefutures/CompletableFutureCallback.java" />
		</programlisting>
	








</section>