<section id="threads">
	<title>Threads in Java
	
		The base means for concurrency are is the
		`java.lang.Threads`
		class. A
		`Thread`
		executes an object of type
		`java.lang.Runnable`
		.
	
	
		`Runnable`
		is an interface with defines the
		`run()`
		method. This
		method
		is called by the
		`Thread`
		object and contains the work which
		should
		be done.
		Therefore the
		"Runnable" is the task to perform. The
		Thread is the
		worker who is doing
		this task.
	
	
		The following demonstrates a task (Runnable) which counts the
		sum
		of a
		given range of numbers. Create a new Java project called
		`de.vogella.concurrency.threads`
		for the
		example code of this
		section.
	
	
		<programlisting>
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
				parse="text" href="./examples/threads/MyRunnable.java" />
		</programlisting>
	
	
		The following example demonstrate the usage of the
		`Thread`
		and the
		`Runnable`
		class.
	
	
		<programlisting>
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
				parse="text" href="./examples/threads/Main.java" />
		</programlisting>
	
	
		Using the
		`Thread`
		class
		directly has the following disadvantages.
		<itemizedlist>
			<listitem>
				Creating a new thread causes some performance overhead
				
			</listitem>
			<listitem>
				Too many threads can lead to reduced performance, as the
					CPU
					needs to switch between these threads.
				
			</listitem>
			<listitem>
				You cannot easily control the number of threads, therefore
					you
					may run into out of memory errors due to too many threads.
				
			</listitem>
		</itemizedlist>
	
	
		The
		`java.util.concurrent`
		package offers improved support for
		concurrency compared to the direct
		usage of
		`Threads`
		. This package is described in the next section. 
	
</section>