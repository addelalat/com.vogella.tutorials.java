<section id="immutability">
	<title>Immutability and Defensive Copies</title>
	<section id="immutability_main">
		<title>Immutability</title>
		<para>The simplest way to avoid problems with concurrency is to
			share
			only immutable data between threads. Immutable data is data
			which cannot changed.
		</para>
		<para>
			To make a class immutable make
			<itemizedlist>
				<listitem>
					<para>all its fields final</para>
				</listitem>
				<listitem>
					<para>the class declared as final</para>
				</listitem>
				<listitem>
					<para>the this reference is not allowed to escape during
						construction
					</para>
				</listitem>
				<listitem>
					<para>Any fields which refer to mutable data objects are</para>
					<itemizedlist>
						<listitem>
							<para>private</para>
						</listitem>
						<listitem>
							<para>have no setter method</para>
						</listitem>
						<listitem>
							<para>they are never directly returned of otherwise exposed to
								a
								caller
							</para>
						</listitem>
						<listitem>
							<para>if they are changed internally in the class this change is
								not visible and has no effect outside of the class
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</para>
		<para>An immutable class may have some mutable data which is uses to
			manages its state but from the outside this class nor any attribute
			of
			this class can get changed.
		</para>
		<para> For all mutable fields, e.g. Arrays, that are passed from the
			outside to the class during the construction phase, the class needs
			to
			make a defensive-copy of the elements to make sure that no other
			object from the outside still can change the data
		</para>

	</section>

	<section id="immutability_defensivecopy">
		<title>Defensive Copies</title>

		<para>You must protect your classes from calling code. Assume that
			calling code will do its best to
			change your data in a way you didn't
			expect it. While this is especially true in case of immutable data it
			is also true for non-immutable data which you still not expect that
			this data is changed outside your class.
		</para>

		<para> To protect your class against that you should copy data you
			receive and only return copies of data to calling code.
		</para>
		<para> The following example creates a copy of a list (ArrayList) and
			returns only the copy of the list. This way the client of this class
			cannot remove elements from the list.

		</para>

		<para>
			<programlisting>
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/defensivecopy/MyDataStructure.java" />
			</programlisting>
		</para>
	</section>
</section>