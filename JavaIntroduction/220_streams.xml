<section id="streams">
== Streams
	<section id="streams_definition">
=== What are streams?
		
			A stream from the
			`java.util.stream`
			package
			is
			a sequence of elements from a source that
			supports
			aggregate
			operations.
		
	</section>
	<section id="stream_intstream">
=== IntStream
		Allow to create a stream of sequence of primitive int-valued
			elements supporting sequential and parallel
			aggregate operations.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/stream/IntStreamExample.java" />
			</programlisting>
		
	</section>
	<section id="lambdas_reduction">
=== Reduction operations with streams and lambdas
		Allow to create a stream of sequence of primitive int-valued
			elements supporting sequential and parallel
			aggregate operations.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/stream/Task.java" />
			</programlisting>
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/stream/StreamTester.java" />
			</programlisting>
		
	</section>

	<section id="lambdas_examples">
=== Example for filtering and mapping the content of a list
		
			The following example demonstrates how to use streams to
			filter a list, perform a mapping operation and to
			create one
			final result string from it with the
			`reduce`
			method.
		

		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/stream/JavaStreamExample.java" />
			</programlisting>
		
	</section>

	<section id="streams_examples">
=== Streams and lambda examples
		
			The following is a larger example for the usage of streams. The code is based on the slides from the
			https://www.eclipsecon.org/europe2015/session/eclipse-collections-example">Goldmann Sachs Collection presentation at EclipseCOn 2015</ulink>
		
		Lets assume the following data model.
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/stream/PetType.java" />
			</programlisting>
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/stream/Pet.java" />
			</programlisting>
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/stream/Person.java" />
			</programlisting>
		
		With this data model you can use streams and lambdas to filter and search the data as demonstrated in the
			following example.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/stream/Example.java" />
			</programlisting>
		

	</section>
</section>