<section id="languageconstructs">
== Java statements
	
		The Java language defines certain statements with a predefined
		meaning.
		The following description lists some of them.
	
	<section id="javalang_if">
=== if-then and if-then-else
		
			The
			`if-then`
			statement is a control flow statement. A block of code is only
			executed when the test specified by the `if` part evaluates to
			`true`.
			The optional
			`else`
			block is executed when the
			`if`
			part evaluates to
			`false`.
		
		
			The following example code shows a class with two methods. The first
			method demonstrates the usage of
			`if-then`
			and the second method demonstrates the usage of
			`if-then-else`.
		


	<section id="languageconstructsss1as2b">
=== Switch
		
			The switch statement can be used to handle several
			alternatives
			if they are based on the same constant value.
		
		
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
					parse="text" href="./examples/switch.java[]
----
		

	<section id="languageconstructs_comparison">
=== Boolean Operations
		
			Use `==` to compare two primitives or to see if two references
			refer to the same object. Use the `equals()` method to see if
			two different objects are equal.
		
		
			<![CDATA[ && ]]>and
			|| are both <wordasword>Short Circuit Methods</wordasword>
			which means that they
			terminate once
			the result of an evaluation is already clear.
			`Example (true || ...)`
			is always `true` while `(false
			<![CDATA[ && ]]>
			...)` always is always interpreted as `false`. Usage:
		
		
			(`var !=null
			<![CDATA[ && ]]>
			var.method1() ...`) ensures that `var` is not
			`null` before doing
			the real
			check.

.Table Title
|===

		=== Boolean
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colname='c1' />
					<colspec colname='c2' />
					
						
|Operations
|Description
						
					
					
						
|`==`
|
								Is equal, in case of objects the system
								checks if the
								reference variable point
								to the same object. It will not compare
								the content of the objects!
							
						
						
|
								`<![CDATA[ && ]]>`
							
|And
						
						
|`!=`
|
								is not equal, similar to `==`.
							
						
						
|`a.equals(b)`
|Checks if string a equals b.
						
						
|`a.equalsIgnoreCase(b)`
|
								Checks if string a equals b while
								ignoring lower cases.
							
						
						
|`If (value ? false : true) {}`
|
								Negotiation: return true if value is not true.
							
						
					
				
			|===
		


