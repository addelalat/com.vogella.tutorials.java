<section id="lambdas" role="wrapper">
	<title>Lambdas</title>
	<section id="lambdas_definition">
		<title>What are lambdas?</title>
		<para>
			The Java programming language supports
			<wordasword>lambdas</wordasword>
			as of Java 8. A lambda expression is a block of code with parameters.
			Lambdas allows to specify a block of code which
			should be executed
			later. If a method expects a
			<wordasword>functional interface</wordasword>
			as parameter it is
			possible to pass in the lambda expression instead.
		</para>
		<para>The type of a lambda expression in Java is a functional
			interface.
		</para>
	</section>
	<section id="lambdas_purpose">
		<title>Purpose of lambda expressions</title>
		<para>
			Using lambdas allows to use a condensed syntax compared to other
			Java
			programming constructs. For example the
			<code>Collection</code>
			interfaces
			has
			<code>forEach</code>
			method which accepts a lambda expression.
		</para>
		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="./examples/lambda/LambdaTest.java" />
			</programlisting>
		</para>

	</section>
	<section id="lambdas_methodreferences">
		<title>Using method references</title>
		<para>
			You can use method references in a lambda expression. Method
			reference define the method to be called via
			<code>CalledFrom::method</code>
			. CalledFrom can be
			<itemizedlist>
				<listitem>
					<para>instance::instanceMethod</para>
				</listitem>
				<listitem>
					<para>SomeClass::staticMethod</para>
				</listitem>
				<listitem>
					<para>SomeClass::instanceMethod</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>
			<programlisting language="java">
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text"
					href="./examples/lambda/LambdaTestMethodReferences.java" />
			</programlisting>
		</para>

	</section>

	<section id="lambdas_closures">
		<title>Difference between a lambda expression and a closure</title>
		<para>
			The Java programming language supports lambdas but not closures. A lambda is an anonymous function, e.g., it can be
			defined as
			parameter. Closures are
			<wordasword>code fragments</wordasword>
			or
			<wordasword>code blocks</wordasword>
			which can be used without
			being a
			method or a class. This means that a closure can access
			variables not defined in its
			parameter list
			and that it can also be
			assigned to a variable.
		</para>
		<para>

		</para>

	</section>


</section>
