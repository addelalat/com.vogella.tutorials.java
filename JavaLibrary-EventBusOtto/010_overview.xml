<section id="ottoeventbus">
== Otto as event bus system 
	<indexterm>
		<primary>Otto</primary>
	</indexterm>
	<indexterm>
		<primary>Event bus</primary>
	</indexterm>
	<section id="ottoeventbus_intro">
=== Otto as event bus system 
		
			http://square.github.io/otto/">Otto</ulink>
			is an Open Source project designed to provide an event bus
			implementation so that components can publish and subscribe
			to
			events.
		
		
			Otto has been a fork of the
			_Guava_
			event bus library from Google and been redesigned to support Android
			as well as possible. Unlike the Guava event bus,
			Otto does not
			consider event subscriptions from base classes or interfaces to
			improve performance of the library and to
			keep the application code
			simple and unambiguous.
		

	<section id="ottoeventbus_installation">
=== Installation

		
			The usage of this library in Java or Android is very simple, download
			the JAR and its one
			requirement from
			http://square.github.io/otto/">Download Otto</ulink>
			and add it to the classpath of your application.
		
		
			If you are using Maven or Gradle as build system you can simply add a
			dependency to group ID
			`com.squareup`
			, artifactId
			`otto`
			and the version 1.3.5 (current as of this writing).
		




	<section id="ottoeventbus_whenouse">
=== When to use Otto?
		Otto is a great way to communicate between your activity and
			fragments or to communicate between an activity and
			a service.
		


	<section id="ottoeventbus_howtosetup">
=== How to setup Otto?
		<note>
			The following description assumes your are using Otto in an
				Android application, even though it is possible to
				use it in an standard Java application.
			
		
		
			To use Otto, create a singleton instance of the
			`Bus`
			class
			and provide access to it for your Android components. This is
			typically done in the
			`Application`
			object of your Android application.
[source,java]
-----
include::res/snippets/CreateBus.java[]
----
		
		
			In this example the
			`ThreadEnforcer.MAIN`
			parameter is used, in this case Otto enforces that events are only
			send from the
			main thread. If you want to be able to
			send events from
			any thread use the
			`ThreadEnforcer.ANY`
			parameter.
		



	<section id="ottoeventbus_register events">
=== How to register and unregister for events?
		<indexterm>
			<primary>@Subcribe</primary>
		</indexterm>
		<indexterm>
			<primary>Otto</primary>
			<secondary>@Subcribe</secondary>
		</indexterm>

		
			Event registration is done via the
			`@Subcribe`
			annotation on a public single parameter method. The method parameter
			is the
			event key,
			i.e., if such an data type is
			send via the Otto event
			bus
			the method
			is called.
		
		
			Event receivers must register via the
			`register`
			method of the
			`Bus`
			class.
[source,java]
-----
include::res/snippets/Register.java[]
----
		

		
			To unregister from events use the
			`unregister()`
			method.
		


	<section id="ottoeventbus_send events">
=== How to send events
		
			For sending events it is not necessary to register with the event
			bus. Simple call the
			`post()`
			method of the
			`Bus`
			class.
[source,java]
-----
include::res/snippets/Send.java[]
----
		


	<section id="ottoeventbus_newcomponent">
=== How can new components receive the last event?
		<indexterm>
			<primary>@Produce</primary>
		</indexterm>
		<indexterm>
			<primary>Otto</primary>
			<secondary>@Produce</secondary>
		</indexterm>

		
			If new components, like a dynamically created fragment, should
			receive event data during their creation, components
			can register as
			producer for such event data with the
			`@Produce`
			annotation.
		
		
			Event receivers must register via the
			`register`
			method of the
			`Bus`
			class.
[source,java]
-----
include::res/snippets/Produce.java[]
----
		



