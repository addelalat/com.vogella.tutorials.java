[[javaio" role="wrapper">
== Java I/O (Input / Output) for files

[[javaio_overview">
=== Overview
		<indexterm>
			<primary>Java I/O</primary>
			<secondary>files</secondary>
		</indexterm>
		
			Java provides a standard way of reading from and writing to files.
			Traditionally the
			`java.io`
			package was used, but in modern Java applications you use the
			`java.nio.file`
			API.
		
		
			Java will read all input as a stream of bytes.
			The
			`InputStream`
			class
			is the superclass of all classes representing an
			input stream of
			bytes.
		


[[javaio_readfile">
=== Reading a file in Java
		
			To read a text file you can use the
			`Files.readAllBytes`
			method. The usage of this method is demonstrated in the following listing.
[source,java]
-----
include::res/read/ReadFile.java[]
----
		

		
			To read a text file line by line into a
			`List`
			of type
			`String`
			structure you can use the
			`Files.readAllLines`
			method.
[source,java]
-----
include::res/read/ReadFileList.java[]
----
		

		
			`Files.readAllLines`
			uses UTF-8 character encoding. It also ensures that file is closed after all bytes are read or in case an
			exception
			occurred.
		


[[javaio_streams">
=== Reading and filtering line by line
		
			The
			`Files.lines`
			method allows read a file line by line, offering a stream. This stream can be filtered and mapped.
			`Files.lines`
			does not close the file once its content is read, therefore it should be wrapped inside a try-with-resource
			statement.

		
		
			In the following
			example unnecessary whitespace at the end of each line is removed and empty lines are filterer.
[source,java]
-----
include::res/read/Files.lines.java[]
----
		
		The next example demonstrates how to filter out lines based on a certain regular expression.
[source,java]
-----
include::res/read/Files.linesRegex.java[]
----
		

[[javaio_writefile">
=== Writing a file in Java
		To write a file you can use the
			following method:
[source,java]
-----
include::res/write/WriteFile.java[]
----
		


[[javaio_currentdirectory">
=== How to identify the current directory
		You can access files relative to the current execution
			directory
			of your Java program. To print the
			current
			directory in
			which
			your Java
			program is
			running, you can use the following statement.
		
		
[source,text]
----
include::res/dir/print.txt[]
----
		




