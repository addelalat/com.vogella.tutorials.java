[[simple]]
== Exercise: Usage of JPA in an Java application
[[simple_model">
=== Project and Entity
		
			Create a
			http://www.vogella.com/tutorials/Eclipse/article.html#firstjava"> Java project]
			"de.vogella.jpa.simple". Create a
			folder
			"lib" and place the
			required
			JPA jars and derby.jar into this folder.
			http://www.vogella.com/tutorials/Eclipse/article.html#classpath">
				Add the libs to the project classpath.
			]
		
		Afterwards create the package "de.vogella.jpa.simple.model"
			and
			create
			the following classes.
		

		
[source,java]
----
include::res/simple/Todo.java[]
----
		

[[example_persistenceunit">
=== Persistence Unit
		
			Create a
			directory
			"META-INF" in your "src" folder and create
			the
			file
			"persistence.xml". This examples uses
			EclipseLink specific flags
			for
			example via the
			parameter "eclipselink.ddl-generation" you specify
			that
			the database
			scheme
			will be automatically dropped and created.

		
		
[source,xml]
----
include::res/simple/persistence.xml[]
----
		
		
			The database specified via "javax.persistence.jdbc.url" will be
			automatically created by the
			Derby Driver. You may
			want to
			adjust the
			path, it currently is based on Linux notations and points to my home
			directory on my Linux system.
		
		
			To see the SQL generated for the databases set
			eclipselink.ddl-generation.output-mode value from "database"
			to
			"sql-script" or "both". Two files will get generated
			'createDDL.jdbc'
			and
			'dropDDL.jdbc'
		

[[simple_main]]
=== Test your installation
		
			Create the following Main class which will create a new entry
			every
			time it is called. After the first call you
			need to remove the
			property "eclipselink.ddl-generation" from persistence.xml otherwise
			you will receive an error as
			EclipseLink tries to create the database
			scheme again. Alternative you could set the property to
			"drop-and-create-tables" but this would drop your database schema at
			every run.
		
		
[source,text]
----
include::res/simple/Main.java[]
----
		
		Run you program several times to see that the database is
			filled.
		

